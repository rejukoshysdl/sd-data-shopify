name: Compare JSON, Extract IDs, Extract Changes, and Convert Excel After Merge

on:
  push:
    branches:
      - int  # ‚úÖ Runs when a new commit is pushed to `int`
      - main  # ‚úÖ Runs when a new commit is pushed to `main`

jobs:
  # **STEP 1: Compare `int` vs `main`**
  diff_check:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Fetch Latest Branches
        run: |
          git fetch origin main
          git fetch origin int

      - name: Create Diff Directory
        run: |
          mkdir -p ./changes/git-diff

      - name: Compare JSON Files in repo-shopify-data (int vs main)
        run: |
          DIFF_FILE="./changes/git-diff/changes.diff"
          git diff origin/main..origin/int -- 'repo-shopify-data/*.json' > $DIFF_FILE
          
          if [ ! -s $DIFF_FILE ]; then
            echo "‚úÖ No JSON files changed between `int` and `main`" > $DIFF_FILE
          fi
          
          cat $DIFF_FILE  # Show diff output for debugging

      - name: Commit and Push Diff File to `int`
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"

          git stash push --include-untracked -m "Stashing changes before pull"
          git pull --rebase origin int
          git stash pop || echo "‚úÖ No stashed changes to apply."

          git add ./changes/git-diff/changes.diff
          git status
          
          if git diff --cached --quiet; then
            echo "‚úÖ No new changes detected. Skipping commit."
          else
            git commit -m "Update changes.diff with JSON file differences after merging into int"
            git push origin int || echo "‚ö†Ô∏è Warning: Git push failed. Check permissions."
          fi

  # **STEP 2: Extract Changed IDs from JSON Diff**
  extract_ids:
    runs-on: ubuntu-latest
    needs: diff_check
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python 3.13
        uses: actions/setup-python@v4
        with:
          python-version: '3.13'

      - name: Install Dependencies
        run: |
          python -m venv venv
          source venv/bin/activate
          python -m pip install --upgrade pip

      - name: Ensure Latest Extracted Files
        run: |
          git fetch origin int
          git pull origin int --rebase
          echo "‚úÖ Latest change diff file pulled!"

      - name: Clear Old Extracted ID File
        run: |
          rm -f ../../changes/id-output/changed_ids.txt
          echo "üßπ Old extracted IDs removed!"

      - name: Run Extract ID Script
        run: |
          source venv/bin/activate
          python ./utils/extractIdByPage.py || echo "‚úÖ No IDs extracted, continuing."

      - name: Commit and Push Extracted ID File
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"

          git stash push --include-untracked -m "Stashing changes before pull"
          git pull --rebase origin int
          git stash pop || echo "‚úÖ No stashed changes to apply."

          git add changes/id-output/changed_ids.txt
          git status

          if git diff --cached --quiet; then
            echo "‚úÖ No new ID changes detected. Skipping commit."
          else
            git commit -m "Update changed_ids.txt with extracted IDs"
            git push origin int || echo "‚ö†Ô∏è Warning: Git push failed. Check permissions."
          fi

  # **STEP 3: Extract Changed JSON Blocks from IDs**
  extract_changes:
    runs-on: ubuntu-latest
    needs: extract_ids
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python 3.13
        uses: actions/setup-python@v4
        with:
          python-version: '3.13'

      - name: Install Dependencies
        run: |
          python -m venv venv
          source venv/bin/activate
          python -m pip install --upgrade pip

      - name: Ensure Latest Extracted Files
        run: |
          git fetch origin int
          git pull origin int --rebase
          echo "‚úÖ Latest change file pulled!"

      - name: Clear Old Extracted JSONs
        run: |
          rm -rf ../../changes/change-only-jsons/*
          echo "üßπ Old extracted JSONs removed!"

      - name: Run Extract Changes Script
        run: |
          source venv/bin/activate
          python ./utils/extract-changes-only.py || echo "‚úÖ No changed JSON blocks extracted, continuing."

      - name: Commit and Push Extracted Changes
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"

          git stash push --include-untracked -m "Stashing changes before pull"
          git pull --rebase origin int
          git stash pop || echo "‚úÖ No stashed changes to apply."

          git add changes/change-only-jsons/*.json
          git status

          if git diff --cached --quiet; then
            echo "‚úÖ No new extracted changes detected. Skipping commit."
          else
            git commit -m "Update change-only-jsons with extracted JSON changes"
            git push origin int || echo "‚ö†Ô∏è Warning: Git push failed. Check permissions."
          fi

  # **STEP 4: Convert JSON to Excel**
  run-conversion-and-push:
    runs-on: ubuntu-latest
    needs: extract_changes
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set Git user info
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"

      - name: Set up Python 3.13
        uses: actions/setup-python@v4
        with:
          python-version: '3.13'

      - name: Install dependencies
        run: |
          python -m venv venv
          source venv/bin/activate
          python -m pip install --upgrade pip
          python -m pip install pandas openpyxl xlsxwriter

      - name: Ensure Latest Extracted Files
        run: |
          git fetch origin int
          git pull origin int --rebase
          echo "‚úÖ Latest extracted JSONs pulled!"

      - name: Run convertJSONToExcel script
        run: |
          source venv/bin/activate
          python ./utils/convertJSONToExcel_in_git.py || echo "‚úÖ No Excel files created, continuing."